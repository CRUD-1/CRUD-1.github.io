{"meta":{"title":"微笑","subtitle":"","description":"","author":"Wei-Xiao","url":"https://github.com/CRUD-1/CRUD-1.github.io.git","root":"/"},"posts":[{"tags":[{"name":"教程","slug":"教程","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/%E6%95%99%E7%A8%8B/"},{"name":"JMeter","slug":"JMeter","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/JMeter/"}],"title":"JMeter基础操作","date":"2020/08/03","text":"5.取样器 作用：想服务器发送请求，并且记录相应时间和响应内容 6.jmeter运行原理 按照线程方式运行 GUI模式消耗资源大，无法实现大的并发和压力测试 使用命令行模式实现高并发和压力测试 使用GUI模式主要目的是编写和调试jmeter脚本 7.jmeter测试计划要素使用jmeter编写测试脚本要素 测试计划(项目) 测试计划中至少一个线程组(业务流程) 线程组中至少一个取样器 (百度一下等) 测试计划中必须有监听器(查看测试结果) 8.jmeter录制脚本 使用badboy录制 安装badboy 输入测试网址 直接操作 停止录制 导出脚本 9.接口测试知识 接口三要素 请求地址/方式 请求参数 返回值 HTTP协议 请求方式 get 带参数 params 不带参数 post x-www-form-urlencoded 参数类型 键值对 content-type:application/x-www-form-urlencoded json格式数据 content-type：application/json put delete 10.jmeter取样器—HTTP请求10.1HTTP管理器HTTP信息头管理器 位置 配置原件 HTTP信息头管理器 HTTP请求头 主要使用Content-Type参数 Content-Type指的是请求参数的数据类型 在jmeter中，发送HTTP的post请求需要添加HTTP信息头管理器 10.2HTTP请求配置http协议 默认端口号80 https协议 默认端口号443 协议 http 服务器名称或ip 接口的域名 127.0.0.1 端口号：如果有填写具体端口号如8000 方法：http协议请求方式 路径：接口地址 内容编码：utf-8 参数：针对post请求x-www-form-urlencoded格式和form-data格式 消息体数据：针对post请求中json格式或者xml格式请求数据 文件上传：上传文件接口 10.3HTTP请求默认值 位置 线程组–添加–配置与按键–http请求默认值 作用： 将同一线程组下所有http请求协议和服务器域名同一管理 如果http请求中自己填写的协议和服务器域名，放发送请求时，使用本身的 11jmeter参数化11.1jmeter英语红变量方法${变量名} 11.2CSV数据空间实现参数化 建立CSV文件 excel建立文件另存为CSV格式，转码为utf-8 配置jmeter中csv数据文件位置 文件名 文件编码 变量名，有多个英文逗号隔开 首行忽略 分隔符默认 HTTP请求中引用参数 ${参数名} 使用csv中所有数据，设置线程数或者循环次数 11.3用户参数 位置 前置处理器—>用户参数 使用方式 针对哪个http请求就在哪里添加 配置用户参数 添加变量 添加变量名称 添加用户 添加测试数据 一个用户就是一个测试数据 使用用户参数 HTTP中引用变量 线程组中设置线程数的值和用户参数中的用户数一致 11.4用户定义的变量 位置 测试计划页 配置元件中–>用户定义的变量 使用 添加变量 使用 凡是可以输入的位置都可以使用 总结参数化 CSV数据文件位置 –>配置元件中 适用于大量测试数据的时候使用 用户参数 –>前置处理器中 适用于少量测试数据 用户定义的变量 –>测试计划 适用于常量配置：数据库地址，测试环境地址，登录数据 断言定义程序代替人工去判断相应数据是否达到预期 响应断言 断言状态码 添加断言：哪一个接口需要，就在该接口下添加断言 配置断言 在测试字段中选择相应代码 在测试模式汇总填写期望代码，如200 JSON断言 作用范围：返回值格式为json格式 添加json断言 哪个接口需要就在哪里添加 配置json断言 Assert JSON Path exists:获取返回结果的字段–>实际结果 Expected Value:预期结果 大小断言 断言返回值所占字节数 如果填写20比较类型>表示返回值字节数>20 持续时间断言 断言接口响应时间是否≤所期望的时间 注意：接口的响应时间都是毫秒级 集合点–并发 Sychronizing Timer –>集合点 位置：定时器–>Sychronizing Timer 那个接口需要做并发就在那个接口下添加集合点 配置集合点 每次结合的用户数 集合用户数所用时间（单位：毫秒） 0：表示无线等待，直到线程数量==集合数量 设置时长：表示规定时间内启动线程，不管有没有集合到预期的数量 注意 集合数最好能被线程数整除 集合时间大于等于线程组中的启动时间 函数使用步骤 点击函数助手 选择函数 设置参数 生成 复制函数字符串 粘贴到需要的位置","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/2020/08/03/Jmeter/","photos":[]},{"tags":[{"name":"问题总结","slug":"问题总结","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"}],"title":"问题总结","date":"2020/07/29","text":"问题总结1.MySql插入中文乱码 修改指定字段编码 1ALTER TABLE `tablename` CHANGE `字段名1` `字段名2` VARCHAR(36) CHARACTER SET utf8 NOT NULL; 12alter table score default character set utf8;alter table article（article代替你自己的表名） change acontent（前后两个content换成你自己的列名，及其后边的数据类型也同样换成自己的） acontent text character set utf8; 整张表编码 1alter table `tablename` convert to character set utf8; 设置url 1String url=\"jdbc:mysql://localhost:3306/数据库名?characterEncoding=utf-8 2.Tomcat端口被占用 查看端口 1netstat -ano|findstr \"8080\" 关闭端口 1taskkill /pid 3284 /f 3.IDEA配置界面UI主题使用Material UI设置主题样式。 plugins连接不上 File—>Setting—>Appearance&Behavior—>System Settings—>HTTP Proxy进行配置，地址推荐用：https://plugins.jetbrains.com**，如果不行也可以配置 http://127.0.0.1:1080 4.IDEA配置Tomcat提示启动错误 报错Error running ‘Tomcat8.5’: port out of range:-1 (moments ago) 修改默认配置，tomcat的server.xml检查一下，端口不能是-1, 一般会选80，或者1-65535之间的任意一个整数 5.Oracle no listener没有监听程序，首先检查服务有没有打开，然后看listener.ora，和tnsnames.ora的host是不是ip地址。然后通过 1lsnrctl status、lsnrctl stop、lsnrctl start `来查看监听状态还有关闭打开监听。 6.Oracle配置远程连接 共享文件夹 修改ip地址，查看能不能ping通 服务器安装Oracle，设置listener.ora，tnsnames.ora中的host，需要注意service-name。 服务器配置环境变量 客户机 首先解压安装OracleInstanceClient到任意目录，并新建文件夹 ETWORK中新建ADMIN,ADMIN放入服务器中文件。 客户机中安装sqldeveloper,配置一下信息。 Navicat中指定oci.dll文件。 7.Tomcat启动超时Eclipse中双击Tomcat，Timeouts中设置时间。 8.连接Mysql警告1Thu Dec 20 12:50:09 CST 2018 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification. 设置连接参数url为：注意amp; 1jdbc:mysql://localhost:3306/Books?characterEncoding=utf8&amp;useSSL=true","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/2020/07/29/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/","photos":[]},{"tags":[{"name":"教程","slug":"教程","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/%E6%95%99%E7%A8%8B/"},{"name":"Git","slug":"Git","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/Git/"}],"title":"Git分支","date":"2020/07/29","text":"Git分支分支基本操作分支创建1git branch fenzhi 查看所有分支1git branch 分支切换1git checkout fenzhi 合并分支当前分支和指定分支(fenzhi)合并 1git merge fenzhi 查看状态1git status 查看Commit操作历史1git log --online 回退版本 查看分支对象1git log --oneline --decorate 项目分叉历史1234567$ git log --oneline --decorate --graph --all* c2b9e (HEAD, master) made other changes| * 87ab2 (testing) made a change|/* f30ab add feature #32 - ability to add new formats to the* 34ac2 fixed bug #1328 - stack overflow under certain conditions* 98ca9 initial commit of my project Github提交代码1git push 地址 master 克隆代码1git pull 地址 master 会把远程分支数据得到：（注意本地要初始化一个仓库） git clone 地址 会得到远程仓库形同的数据多次执行会覆盖本地 模拟两个用户12345git init修改git addgit commitgit push 冲突后会提示，手动修改重新提交 先add 再commit然后pull的时候会自动合并，手动修改。","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/2020/07/29/Git%E5%88%86%E6%94%AF/","photos":[]},{"tags":[{"name":"Test","slug":"Test","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/Test/"}],"title":"Test","date":"2020/07/26","text":"","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/2020/07/26/Test/","photos":[]},{"tags":[{"name":"教程","slug":"教程","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/%E6%95%99%E7%A8%8B/"},{"name":"Hexo","slug":"Hexo","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/Hexo/"}],"title":"Hello World","date":"2020/07/26","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/2020/07/26/hello-world/","photos":["/images/huhu.png"]}],"categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/%E6%95%99%E7%A8%8B/"},{"name":"JMeter","slug":"JMeter","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/JMeter/"},{"name":"问题总结","slug":"问题总结","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"},{"name":"Git","slug":"Git","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/Git/"},{"name":"Test","slug":"Test","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/Test/"},{"name":"Hexo","slug":"Hexo","permalink":"https://github.com/CRUD-1/CRUD-1.github.io.git/tags/Hexo/"}]}